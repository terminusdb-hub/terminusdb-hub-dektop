name: Build and release
on:
  push:
    branches:
      - master

env:
  TERMINUSDB_VERSION: v4.2.0
  # TODO: This is only for the mac version now and should be fetched from the TerminusDB repo instead
  TUS_VERSION: v0.0.5
  TERMINUSDB_STORE_PROLOG_VERSION: v0.16.4


jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: 14
    - run: npm install
    - run: |
        if [ $(echo "${{ github.ref }}" | grep -P "master") ]; then
            BRANCH="${GITHUB_REF##*/}"
            bash .ci/install_node_project.sh 'https://github.com/terminusdb/terminusdb-client-js.git' "$BRANCH" "terminusdb-client"
            bash .ci/install_node_project.sh 'https://github.com/terminusdb/terminusdb-client-js.git' "$BRANCH" "terminusdb-react-components"
        fi
    - run: mv console/env-production console/.env
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCLOUD_TOKEN }}
        export_default_credentials: true

    - run: npm run build
    - run: bash ".ci/publish_gcloud.sh" "${GITHUB_REF##*/}"


  windows_desktop:
    runs-on: windows-latest
    needs: setup-build-publish-deploy

    steps:
    - uses: actions/checkout@v2

    - run: |
        TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        sed -i "s,https://cdn.terminusdb.com/js_libs/terminusdb_hub_console/master,https://cdn.terminusdb.com/js_libs/terminusdb_hub_console/${TAG}," desktop/public/electron.js
      shell: bash

    - run: |
        cd desktop
        curl -L "https://github.com/terminusdb/terminusdb/releases/download/${TERMINUSDB_VERSION}/terminusdb_windows.tar.gz" > terminusdb_windows.tar.gz
        mkdir public/windows
        cd public/windows
        tar xf ../../terminusdb_windows.tar.gz
        cd ../../
        rm -rf terminusdb_windows.tar.gz
        npm i
        npx electron-builder build -p never
      shell: bash

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: "terminusdb-desktop Setup.exe"
        path: "desktop/dist/TerminusDB*.exe"


  linux_desktop:
    runs-on: ubuntu-latest
    needs: setup-build-publish-deploy
    defaults:
      run:
        working-directory: desktop

    steps:
    - uses: actions/checkout@v2

    - run: |
        TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        sed -i "s,https://cdn.terminusdb.com/js_libs/terminusdb_hub_console/master,https://cdn.terminusdb.com/js_libs/terminusdb_hub_console/${TAG}," public/electron.js

    - name: Use Node.js 14
      uses: actions/setup-node@v1
      with:
        node-version: 14

    - run: npm install

    - run: curl -L "https://github.com/terminusdb/terminusdb/releases/download/${TERMINUSDB_VERSION}/TerminusDB-amd64.AppImage" > public/TerminusDB-amd64.AppImage && chmod +x public/*.AppImage

    - run: |
        npx electron-builder build --linux appimage -p never
        TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: terminusdb-desktop.AppImage
        path: desktop/dist/*.AppImage

  mac_os_desktop:
    runs-on: macos-latest
    needs: setup-build-publish-deploy
    defaults:
      run:
        working-directory: desktop
    steps:
    - uses: actions/checkout@v2

    - run: |
        TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        sed -i '' "s,https://cdn.terminusdb.com/js_libs/terminusdb_hub_console/master,https://cdn.terminusdb.com/js_libs/terminusdb_hub_console/${TAG}," public/electron.js

    - name: Use Node.js 14
      uses: actions/setup-node@v1
      with:
        node-version: 14

    - name: Cache node modules on Mac
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-terminusdb-desktop-${{ hashFiles('desktop/package-lock.json') }}

    - run: npm install

    - name: Install terminusdb-store-prolog
      run: |
        bash mac/install_dependencies.sh "$TERMINUSDB_STORE_PROLOG_VERSION" "$TERMINUSDB_VERSION" "$TUS_VERSION"

    - name: Cache SWI Prolog on Mac
      id: cache_mac_swipl
      uses: actions/cache@v2
      with:
        path: desktop/public/SWI-Prolog.app
        key: ${{ runner.os }}-swipl2-terminusdb-desktop-${{ hashFiles('desktop/public/pack/terminus_store_prolog/.ci/install_swipl_dmg.sh') }}

    - name: Install SWI Prolog if cache does not hit
      if: steps.cache_mac_swipl.outputs.cache-hit != 'true'
      run: bash mac/install_swipl.sh

    - name: Compile dmg
      run: |
        npm run build-mac-os

    - name: Set pack dir
      run: |
        export TERMINUSDB_SERVER_PACK_DIR=./public/pack

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: terminusdb-desktop.dmg
        path: desktop/dist/*.dmg


  deploy:
    runs-on: ubuntu-latest
    needs: [windows_desktop, linux_desktop, mac_os_desktop]
    if: ${{ github.event_name != 'pull_request' && github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/master' }}

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2

    - name: Set release name
      id: release_name
      run: |
        SUFFIX=""
        if echo "$GITHUB_REF" | grep -P "canary|rc" ; then SUFFIX="-tag"; fi
        TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        TAG_WITH_SUFFIX="$TAG$SUFFIX"
        echo "::set-output name=tag::$TAG_WITH_SUFFIX"

    - name: Delete tag and release
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_name.outputs.tag }}
      continue-on-error: true

    - name: Create a Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_name.outputs.tag }}
        prerelease: ${{ !contains(github.ref, 'tags') }}
        files: |
          terminusdb-desktop Setup.exe/*.exe
          terminusdb-desktop.AppImage/*.AppImage
          terminusdb-desktop.dmg/*.dmg
